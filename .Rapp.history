df=data.frame(country=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))#
## Line chart#
Line <- gvisLineChart(df,#
                options=list(legend='none', width=300, height=200))#
plot(Line)
? saveRDS
?paste0
rm(list = ls())#
#
# A graph made from David Wasserman's 2012 National popular Vote Tracker:#
# https://docs.google.com/spreadsheet/ccc?key=0AjYj9mXElO_QdHpla01oWE1jOFZRbnhJZkZpVFNKeVE#gid=19#
#
# See also John Sides' analysis (with links to others) on the same topic:#
# http://themonkeycage.org/blog/2013/01/07/what-if-the-obama-campaign-didnt-win-him-the-election/#
#
##
# LOAD DATA#
##
#
# Load RCurl package.#
library(RCurl)#
# Address of a copy of David Wasserman's spreadsheet.#
dw_link <- "https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdHUxMkY3V0lua1VWd3V3RW9EemRpMFE&output=csv"#
# Download the spreadsheet.#
dw_html <- getURL(dw_link)#
# Transform the result into a proper dataset, leaving text variables (strings) unchanged.#
dw_data <- read.csv(textConnection(dw_html), stringsAsFactors = TRUE)#
# Check result.#
head(dw_data)#
#
##
# MARK SWING STATES#
##
#
# Create marker for battleground states.#
dw_data$Swing <- "Non-Swing State"#
# Mark first twelve states (defined as swing states in the data source).#
dw_data$Swing[1:12] <- "Swing State"#
# Make the variable a factor.#
dw_data$Swing <- factor(dw_data$Swing)#
# Check result.#
dw_data[1:15,]#
#
##
# CREATE MARGINS OF VICTORY#
##
#
# Two-party margins of victory.#
dw_data  <- within(dw_data, {#
  Margin08 <- 100 * ((Obama08 - McCain08) / (Obama08 + McCain08))#
  Margin12 <- 100 * ((Obama12 - Romney12) / (Obama12 + Romney12))#
})#
# Check results.#
summary(dw_data$Margin08)#
summary(dw_data$Margin12)#
#
##
# SORT VALUES#
##
#
# Load reshape package.#
library(reshape)#
# (1/2) Reorder the data by margin of victory in 2012.#
dw_data <- dw_data[order(dw_data$Margin12),]#
# (2/2) Reorder state factor levels to the order of appearance in the data.#
dw_data$State <- factor(dw_data$State, as.character(dw_data$State))#
# Check first five rows.#
head(dw_data)#
# Check last five rows.#
tail(dw_data)#
#
##
# VISUALIZE AS A DOT PLOT#
##
#
# Load ggplot2 package.#
library(ggplot2)#
# Initialize plot.#
dw_plot <- ggplot(dw_data) #
# Add margin of victory from 2008. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin08, y = State, color = "2008"))#
# Add margin of victory from 2012. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin12, y = State, color = "2012"))#
# Add title for horizontal axis.#
dw_plot <- dw_plot + xlab("Two-party margin of victory")#
# Add vertical line at zero.#
dw_plot <- dw_plot + geom_vline(xintercept = 0, color = "grey", linetype = "longdash")#
# Check result.#
dw_plot#
#
##
# CUSTOMIZE LEGEND AND COLORS#
##
#
# Create a discrete color scale.#
dw_cols <- c("2008" = "grey", "2012" = "black")#
# Apply color scale.#
dw_plot <- dw_plot + scale_colour_manual(values = dw_cols, name = "Year")#
# Check result: re-plot.#
dw_plot#
#
##
# DISCRIMINATE BATTLEGROUND STATES#
##
#
# Subset swing states.#
dw_swing <- dw_data[dw_data$Swing=="Swing State",]#
# Add swing states to color scale.#
dw_cols <- c("2008" = "grey", "2012" = "black", "Swing state" = "red")#
# Re-apply color scale.#
dw_plot <- dw_plot + scale_colour_manual(values = dw_cols, name = "Year")#
# Overlay swing states to plot.#
dw_plot + geom_point(data = dw_swing, aes(x = Margin12, y = State, color = "Swing state"), size=3, solid=F)
dw_plot + geom_point(data = dw_swing, aes(x = Margin12, y = State, color = "Swing state"), size=3, shape=2)
dw_plot + geom_point(data = dw_swing, aes(x = Margin12, y = State, color = "Swing state"), size=3, shape=1)
dw_plot + geom_point(dw_swing, aes(x = Margin12, y = State, color = "Swing state"), size=3, shape=1)
dw_plot + geom_point(data = dw_swing, aes(x = Margin12, y = State, color = "Swing state"), size = 2, shape = 1)
dw_plot + geom_point(data = dw_swing, aes(x = Margin12, y = State, color = "Swing state"), size = 2.5, shape = 1)
dw_plot + geom_point(data = dw_swing, aes(x = Margin12, y = State, color = "Swing state"), size = 2.75, shape = 1)
dw_plot + geom_point(data = dw_swing, aes(x = Margin12, y = State, color = "Swing state"), size = 3, shape = 1)
dw_plot + geom_point(data = dw_swing, aes(x = Margin12, y = State, color = "Swing state"), size = 3, border = 2, shape = 1)
dw_plot + geom_point(data = dw_swing, #
  aes(x = Margin12, y = State, color = "Swing state"), #
  size = 3, border = 2, shape = 1)
A graph made from David Wasserman's 2012 National popular Vote Tracker:#
# https://docs.google.com/spreadsheet/ccc?key=0AjYj9mXElO_QdHpla01oWE1jOFZRbnhJZkZpVFNKeVE#gid=19#
#
# See also John Sides' analysis (with links to others) on the same topic:#
# http://themonkeycage.org/blog/2013/01/07/what-if-the-obama-campaign-didnt-win-him-the-election/#
#
##
# LOAD DATA#
##
#
# Load RCurl package.#
library(RCurl)#
# Address of a copy of David Wasserman's spreadsheet, cleaned up.#
dw_link <- "https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdHUxMkY3V0lua1VWd3V3RW9EemRpMFE&output=csv"#
# Download the spreadsheet.#
dw_html <- getURL(dw_link)#
# Transform the result into a proper dataset, leaving text variables (strings) unchanged.#
dw_data <- read.csv(textConnection(dw_html), stringsAsFactors = TRUE)#
# Check result.#
head(dw_data)#
#
##
# MARK SWING STATES#
##
#
# Create marker for battleground states.#
dw_data$Swing <- "Non-Swing State"#
# Mark first twelve states (defined as swing states in the data source).#
dw_data$Swing[1:12] <- "Swing State"#
# Make the variable a factor.#
dw_data$Swing <- factor(dw_data$Swing)#
# Check result.#
dw_data[1:15,]#
#
##
# CREATE MARGINS OF VICTORY#
##
#
# Two-party margins of victory.#
dw_data  <- within(dw_data, {#
  Margin08 <- 100 * ((Obama08 - McCain08) / (Obama08 + McCain08))#
  Margin12 <- 100 * ((Obama12 - Romney12) / (Obama12 + Romney12))#
})#
# Check results.#
summary(dw_data$Margin08)#
summary(dw_data$Margin12)#
#
##
# SORT VALUES#
##
#
# Load reshape package.#
library(reshape)#
# (1/2) Reorder the data by margin of victory in 2012.#
dw_data <- dw_data[order(dw_data$Margin12),]#
# (2/2) Reorder state factor levels to the order of appearance in the data.#
dw_data$State <- factor(dw_data$State, as.character(dw_data$State))#
# Check first five rows.#
head(dw_data)#
# Check last five rows.#
tail(dw_data)#
#
##
# VISUALIZE AS A DOT PLOT#
##
#
# Load ggplot2 package.#
library(ggplot2)#
# Initialize plot.#
dw_plot <- ggplot(dw_data) #
# Add vertical line at zero.#
dw_plot <- dw_plot + geom_vline(xintercept = 0, color = "grey", linetype = "longdash")#
# Add margin of victory from 2008. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin08, y = State, color = "2008"))#
# Add margin of victory from 2012. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin12, y = State, color = "2012"))#
# Add title for horizontal axis.#
dw_plot <- dw_plot + xlab("Two-party margin of victory")#
# Check result.#
dw_plot#
#
##
# CUSTOMIZE LEGEND AND COLORS#
##
#
# Create a discrete color scale.#
dw_cols <- c("2008" = "grey", "2012" = "black")#
# Apply color scale.#
dw_plot <- dw_plot + scale_colour_manual(values = dw_cols, name = "Year")#
# Check result: re-plot.#
dw_plot#
#
##
# DISCRIMINATE BATTLEGROUND STATES#
##
#
# Subset swing states.#
dw_swing <- dw_data[dw_data$Swing=="Swing State",]#
# Add swing states to color scale.#
dw_cols <- c("2008" = "grey", "2012" = "black", "Swing state" = "red")#
# Re-apply color scale.#
dw_plot <- dw_plot + scale_colour_manual(values = dw_cols, name = "Year")#
# Overlay swing states to plot. Shape '1' is the empty circle. Size and shape are _outside_ aes().#
dw_plot + geom_point(data = dw_swing, #
  aes(x = Margin12, y = State, color = "Swing state"), #
  size = 3, border = 2, shape = 1)
library(ggplot2)#
#
#create data with the desired structure#
dd <- expand.grid(facet=LETTERS[1:4], group=letters[1:5], subject=factor(1:10))#
dd$value <- exp(rnorm(nrow(dd)))#
#
#calculate CV's#
ddcv <- ddply(dd, .(facet,group), #
     function(x)c(CV=sd(x$value)/mean(x$value), maxX=max(x$value)))#
ddcv$CV <- round(ddcv$CV,1)#
#
#make plots#
p <- qplot(group, value, colour=subject, data=dd) + facet_wrap(~facet)#
p + geom_text(aes(x=group, y=maxX+1, label=CV), colour="black", data=ddcv)
library(ggplot2)#
x <- data.frame(a=1:10, b=rnorm(10))#
x$lab <- letters[1:10]#
ggplot(data=x, aes(a, b, label=lab)) + #
  geom_point() + #
  geom_text(data = subset(x, abs(b) > 0.2), vjust=0)
A graph made from David Wasserman's 2012 National popular Vote Tracker:#
# https://docs.google.com/spreadsheet/ccc?key=0AjYj9mXElO_QdHpla01oWE1jOFZRbnhJZkZpVFNKeVE#gid=19#
#
# See also John Sides' analysis (with links to others) on the same topic:#
# http://themonkeycage.org/blog/2013/01/07/what-if-the-obama-campaign-didnt-win-him-the-election/#
#
##
# LOAD DATA#
##
#
# Load RCurl package.#
library(RCurl)#
# Address of a copy of David Wasserman's spreadsheet, cleaned up.#
dw_link <- "https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdHUxMkY3V0lua1VWd3V3RW9EemRpMFE&output=csv"#
# Download the spreadsheet.#
dw_html <- getURL(dw_link)#
# Transform the result into a proper dataset, leaving text variables (strings) unchanged.#
dw_data <- read.csv(textConnection(dw_html), stringsAsFactors = TRUE)#
# Check result.#
head(dw_data)#
#
##
# MARK SWING STATES#
##
#
# Create marker for battleground states.#
dw_data$Swing <- "Non-Swing State"#
# Mark first twelve states (defined as swing states in the data source).#
dw_data$Swing[1:12] <- "Swing State"#
# Make the variable a factor.#
dw_data$Swing <- factor(dw_data$Swing)#
# Check result.#
dw_data[1:15,]#
#
##
# CREATE MARGINS OF VICTORY#
##
#
# Two-party margins of victory.#
dw_data  <- within(dw_data, {#
  Margin08 <- 100 * ((Obama08 - McCain08) / (Obama08 + McCain08))#
  Margin12 <- 100 * ((Obama12 - Romney12) / (Obama12 + Romney12))#
})#
# Check results.#
summary(dw_data$Margin08)#
summary(dw_data$Margin12)#
#
##
# SORT VALUES#
##
#
# Load reshape package.#
library(reshape)#
# (1/2) Reorder the data by margin of victory in 2012.#
dw_data <- dw_data[order(dw_data$Margin12),]#
# (2/2) Reorder state factor levels to the order of appearance in the data.#
dw_data$State <- factor(dw_data$State, as.character(dw_data$State))#
# Check first five rows.#
head(dw_data)#
# Check last five rows.#
tail(dw_data)#
#
##
# VISUALIZE AS A DOT PLOT#
##
#
# Load ggplot2 package.#
library(ggplot2)#
# Initialize plot.#
dw_plot <- ggplot(dw_data) #
# Add vertical line at zero.#
dw_plot <- dw_plot + geom_vline(xintercept = 0, color = "grey", linetype = "longdash")#
# Add margin of victory from 2008. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin08, y = State, color = "2008"))#
# Add margin of victory from 2012. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin12, y = State, color = "2012"))#
# Add title for horizontal axis.#
dw_plot <- dw_plot + xlab("Two-party margin of victory")#
# Check result.#
dw_plot#
#
##
# CUSTOMIZE LEGEND AND COLORS#
##
#
# Create a discrete color scale.#
dw_cols <- c("2008" = "grey", "2012" = "black")#
# Apply color scale.#
dw_plot <- dw_plot + scale_colour_manual(values = dw_cols, name = "Year")#
# Check result: re-plot.#
dw_plot#
#
##
# DISCRIMINATE BATTLEGROUND STATES#
##
#
# Subset swing states.#
dw_swing <- dw_data[dw_data$Swing=="Swing State",]#
# Add swing states to color scale.#
dw_cols <- c("2008" = "grey", "2012" = "black", "Swing state" = "red")#
# Re-apply color scale.#
dw_plot <- dw_plot + scale_colour_manual(values = dw_cols, name = "Year")#
# Overlay swing states to plot. Shape '1' is the empty circle. Size and shape are _outside_ aes().#
dw_plot + geom_point(data = dw_swing, #
  aes(x = Margin12, y = State, color = "Swing state"), #
  size = 3, border = 2, shape = 1)#
# Add a vertical separation between swing and non-swing states.#
#dw_plot + facet_wrap(~ Swing, nrow = 2, scales = "free_y") # ... but this is ugly#
#
dw_plot + theme(axis.text.y = element_text(colour = ifelse(dw_data$Swing=="Swing State","red","grey")))
x <- ifelse(dw_data$Swing=="Swing State","red","grey")#
dw_plot + theme(axis.text.y = element_text(colour = x))
x
VISUALIZE AS A DOT PLOT#
##
#
# Load ggplot2 package.#
library(ggplot2)#
# Initialize plot.#
dw_plot <- ggplot(dw_data) #
# Add vertical line at zero.#
dw_plot <- dw_plot + geom_vline(xintercept = 0, color = "grey", linetype = "longdash")#
# Add margin of victory from 2008. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin08, y = State, color = "2008"))#
# Add margin of victory from 2012. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin12, y = State, color = "2012"))#
# Add title for horizontal axis.#
dw_plot <- dw_plot + xlab("Two-party margin of victory")#
# Check result.#
dw_plot#
#
##
# CUSTOMIZE LEGEND AND COLORS#
##
#
# Create a discrete color scale.#
dw_cols <- c("2008" = "grey", "2012" = "black")#
# Apply color scale.#
dw_plot <- dw_plot + scale_colour_manual(values = dw_cols, name = "Year")#
# Check result: re-plot.#
dw_plot#
#
##
# DISCRIMINATE BATTLEGROUND STATES#
##
#
# Subset swing states.#
dw_swing <- dw_data[dw_data$Swing=="Swing State",]#
# Add swing states to color scale.#
dw_cols <- c("2008" = "grey", "2012" = "black", "Swing state" = "red")#
# Re-apply color scale.#
dw_plot <- dw_plot + scale_colour_manual(values = dw_cols, name = "Year")#
# Overlay swing states to plot. Shape '1' is the empty circle. Size and shape are _outside_ aes().#
dw_plot <- dw_plot + geom_point(data = dw_swing, #
  aes(x = Margin12, y = State, color = "Swing state"), #
  size = 3, border = 2, shape = 1)#
# Check result: re-plot.#
dw_plot#
#
# Define different colors for the labels of swing states.#
dw_labc <- ifelse(dw_data$Swing=="Swing State","red","grey")#
# Stick color labels onto the plot (thanks to Didzis from Stack Overflow).#
dw_plot <- dw_plot + theme(axis.text.y = element_text(colour = dw_labc))#
# Check result: re-plot.#
dw_plot
<style>@import url(syllabus.css);</style>#
# Data Visualization#
# A graph made from David Wasserman's 2012 National popular Vote Tracker:#
# https://docs.google.com/spreadsheet/ccc?key=0AjYj9mXElO_QdHpla01oWE1jOFZRbnhJZkZpVFNKeVE#gid=19#
#
# See also John Sides' analysis (with links to others) on the same topic:#
# http://themonkeycage.org/blog/2013/01/07/what-if-the-obama-campaign-didnt-win-him-the-election/#
#
##
# LOAD DATA#
##
#
# Load RCurl package.#
library(RCurl)#
# Address of a copy of David Wasserman's spreadsheet, cleaned up.#
dw_link <- "https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdHUxMkY3V0lua1VWd3V3RW9EemRpMFE&output=csv"#
# Download the spreadsheet.#
dw_html <- getURL(dw_link)#
# Transform the result into a proper dataset, leaving text variables (strings) unchanged.#
dw_data <- read.csv(textConnection(dw_html), stringsAsFactors = TRUE)#
# Check result.#
head(dw_data)#
#
##
# MARK SWING STATES#
##
#
# Create marker for battleground states.#
dw_data$Swing <- "Non-Swing State"#
# Mark first twelve states (defined as swing states in the data source).#
dw_data$Swing[1:12] <- "Swing State"#
# Make the variable a factor.#
#dw_data$Swing <- factor(dw_data$Swing)#
# Check result.#
dw_data[1:15,]#
#
##
# CREATE MARGINS OF VICTORY#
##
#
# Two-party margins of victory.#
dw_data  <- within(dw_data, {#
  Margin08 <- 100 * ((Obama08 - McCain08) / (Obama08 + McCain08))#
  Margin12 <- 100 * ((Obama12 - Romney12) / (Obama12 + Romney12))#
})#
# Check results.#
summary(dw_data$Margin08)#
summary(dw_data$Margin12)#
#
##
# SORT VALUES#
##
#
# Load reshape package.#
library(reshape)#
# (1/2) Reorder the data by margin of victory in 2012.#
dw_data <- dw_data[order(dw_data$Margin12),]#
# (2/2) Reorder state factor levels to the order of appearance in the data.#
dw_data$State <- factor(dw_data$State, dw_data$State)#
# Check first five rows.#
head(dw_data)#
# Check last five rows.#
tail(dw_data)#
#
##
# VISUALIZE AS A DOT PLOT#
##
#
# Load ggplot2 package.#
library(ggplot2)#
# Initialize plot.#
dw_plot <- ggplot(dw_data) #
# Add vertical line at zero.#
dw_plot <- dw_plot + geom_vline(xintercept = 0, color = "grey", linetype = "longdash")#
# Add margin of victory from 2008. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin08, y = State, color = "2008"))#
# Add margin of victory from 2012. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin12, y = State, color = "2012"))#
# Add title for horizontal axis.#
dw_plot <- dw_plot + xlab("Two-party margin of victory")#
# Check result.#
dw_plot
?factor
factor(dw_data$State)
rm(list = ls())
<style>@import url(syllabus.css);</style>#
# Data Visualization#
# A graph made from David Wasserman's 2012 National popular Vote Tracker:#
# https://docs.google.com/spreadsheet/ccc?key=0AjYj9mXElO_QdHpla01oWE1jOFZRbnhJZkZpVFNKeVE#gid=19#
#
# See also John Sides' analysis (with links to others) on the same topic:#
# http://themonkeycage.org/blog/2013/01/07/what-if-the-obama-campaign-didnt-win-him-the-election/#
#
##
# LOAD DATA#
##
#
# Load RCurl package.#
library(RCurl)#
# Address of a copy of David Wasserman's spreadsheet, cleaned up.#
dw_link <- "https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdHUxMkY3V0lua1VWd3V3RW9EemRpMFE&output=csv"#
# Download the spreadsheet.#
dw_html <- getURL(dw_link)#
# Transform the result into a proper dataset, leaving text variables (strings) unchanged.#
dw_data <- read.csv(textConnection(dw_html), stringsAsFactors = TRUE)#
# Check result.#
head(dw_data)#
#
##
# MARK SWING STATES#
##
#
# Create marker for battleground states.#
dw_data$Swing <- "Non-Swing State"#
# Mark first twelve states (defined as swing states in the data source).#
dw_data$Swing[1:12] <- "Swing State"#
# Make the variable a factor.#
#dw_data$Swing <- factor(dw_data$Swing)#
# Check result.#
dw_data[1:15,]#
#
##
# CREATE MARGINS OF VICTORY#
##
#
# Two-party margins of victory.#
dw_data  <- within(dw_data, {#
  Margin08 <- 100 * ((Obama08 - McCain08) / (Obama08 + McCain08))#
  Margin12 <- 100 * ((Obama12 - Romney12) / (Obama12 + Romney12))#
})#
# Check results.#
summary(dw_data$Margin08)#
summary(dw_data$Margin12)#
#
##
# SORT VALUES#
##
#
# Load reshape package.#
library(reshape)#
# (1/2) Reorder the data by margin of victory in 2012.#
dw_data <- dw_data[order(dw_data$Margin12),]#
# (2/2) Reorder state factor levels to the order of appearance in the data.#
dw_data$State <- factor(dw_data$State, dw_data$State)#
# Check first five rows.#
head(dw_data)#
# Check last five rows.#
tail(dw_data)#
#
##
# VISUALIZE AS A DOT PLOT#
##
#
# Load ggplot2 package.#
library(ggplot2)#
# Initialize plot.#
dw_plot <- ggplot(dw_data) #
# Add vertical line at zero.#
dw_plot <- dw_plot + geom_vline(xintercept = 0, color = "grey", linetype = "longdash")#
# Add margin of victory from 2008. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin08, y = State, color = "2008"))#
# Add margin of victory from 2012. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin12, y = State, color = "2012"))#
# Add title for horizontal axis.#
dw_plot <- dw_plot + xlab("Two-party margin of victory")#
# Check result.#
dw_plot
str(dw_data)
head(dw_data)
str(dw_data$State)
<style>@import url(syllabus.css);</style>#
# Data Visualization#
# A graph made from David Wasserman's 2012 National popular Vote Tracker:#
# https://docs.google.com/spreadsheet/ccc?key=0AjYj9mXElO_QdHpla01oWE1jOFZRbnhJZkZpVFNKeVE#gid=19#
#
# See also John Sides' analysis (with links to others) on the same topic:#
# http://themonkeycage.org/blog/2013/01/07/what-if-the-obama-campaign-didnt-win-him-the-election/#
#
##
# LOAD DATA#
##
#
# Load RCurl package.#
library(RCurl)#
# Address of a copy of David Wasserman's spreadsheet, cleaned up.#
dw_link <- "https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdHUxMkY3V0lua1VWd3V3RW9EemRpMFE&output=csv"#
# Download the spreadsheet.#
dw_html <- getURL(dw_link)#
# Transform the result into a proper dataset, leaving text variables (strings) unchanged.#
dw_data <- read.csv(textConnection(dw_html), stringsAsFactors = TRUE)#
# Check result.#
head(dw_data)#
#
##
# MARK SWING STATES#
##
#
# Create marker for battleground states.#
dw_data$Swing <- "Non-Swing State"#
# Mark first twelve states (defined as swing states in the data source).#
dw_data$Swing[1:12] <- "Swing State"#
# Make the variable a factor.#
#dw_data$Swing <- factor(dw_data$Swing)#
# Check result.#
dw_data[1:15,]#
#
##
# CREATE MARGINS OF VICTORY#
##
#
# Two-party margins of victory.#
dw_data  <- within(dw_data, {#
  Margin08 <- 100 * ((Obama08 - McCain08) / (Obama08 + McCain08))#
  Margin12 <- 100 * ((Obama12 - Romney12) / (Obama12 + Romney12))#
})#
# Check results.#
summary(dw_data$Margin08)#
summary(dw_data$Margin12)#
#
##
# SORT VALUES#
##
#
# Load reshape package.#
library(reshape)#
# (1/2) Reorder the data by margin of victory in 2012.#
dw_data <- dw_data[order(dw_data$Margin12),]
str(dw_data$State)
factor(dw_data$State)
as.factor(dw_data$State)
?factor
rm(list = ls())
ls()
<style>@import url(syllabus.css);</style>#
# Data Visualization#
# A graph made from David Wasserman's 2012 National popular Vote Tracker:#
# https://docs.google.com/spreadsheet/ccc?key=0AjYj9mXElO_QdHpla01oWE1jOFZRbnhJZkZpVFNKeVE#gid=19#
#
# See also John Sides' analysis (with links to others) on the same topic:#
# http://themonkeycage.org/blog/2013/01/07/what-if-the-obama-campaign-didnt-win-him-the-election/#
#
##
# LOAD DATA#
##
#
# Load RCurl package.#
library(RCurl)#
# Address of a copy of David Wasserman's spreadsheet, cleaned up.#
dw_link <- "https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdHUxMkY3V0lua1VWd3V3RW9EemRpMFE&output=csv"#
# Download the spreadsheet.#
dw_html <- getURL(dw_link)#
# Transform the result into a proper dataset, leaving text variables (strings) unchanged.#
dw_data <- read.csv(textConnection(dw_html), stringsAsFactors = TRUE)#
# Check result.#
head(dw_data)#
#
##
# MARK SWING STATES#
##
#
# Create marker for battleground states.#
dw_data$Swing <- "Non-Swing State"#
# Mark first twelve states (defined as swing states in the data source).#
dw_data$Swing[1:12] <- "Swing State"#
# Check result.#
dw_data[1:15,]#
#
##
# CREATE MARGINS OF VICTORY#
##
#
# Two-party margins of victory.#
dw_data  <- within(dw_data, {#
  Margin08 <- 100 * ((Obama08 - McCain08) / (Obama08 + McCain08))#
  Margin12 <- 100 * ((Obama12 - Romney12) / (Obama12 + Romney12))#
})#
# Check results.#
summary(dw_data$Margin08)#
summary(dw_data$Margin12)
SORT VALUES#
##
#
# Load reshape package.#
library(reshape)#
# (1/2) Reorder the data by margin of victory in 2012.#
dw_data <- dw_data[order(dw_data$Margin12),]#
# (2/2) Reorder state factor levels to the order of appearance in the data.#
dw_data$State <- as.factor(dw_data$State)#
# Check first five rows.#
head(dw_data)#
# Check last five rows.#
tail(dw_data)
VISUALIZE AS A DOT PLOT#
##
#
# Load ggplot2 package.#
library(ggplot2)#
# Initialize plot.#
dw_plot <- ggplot(dw_data) #
# Add vertical line at zero.#
dw_plot <- dw_plot + geom_vline(xintercept = 0, color = "grey", linetype = "longdash")#
# Add margin of victory from 2008. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin08, y = State, color = "2008"))#
# Add margin of victory from 2012. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin12, y = State, color = "2012"))#
# Add title for horizontal axis.#
dw_plot <- dw_plot + xlab("Two-party margin of victory")#
# Check result.#
dw_plot
<style>@import url(syllabus.css);</style>#
# Data Visualization#
# A graph made from David Wasserman's 2012 National popular Vote Tracker:#
# https://docs.google.com/spreadsheet/ccc?key=0AjYj9mXElO_QdHpla01oWE1jOFZRbnhJZkZpVFNKeVE#gid=19#
#
# See also John Sides' analysis (with links to others) on the same topic:#
# http://themonkeycage.org/blog/2013/01/07/what-if-the-obama-campaign-didnt-win-him-the-election/#
#
##
# LOAD DATA#
##
#
# Load RCurl package.#
library(RCurl)#
# Address of a copy of David Wasserman's spreadsheet, cleaned up.#
dw_link <- "https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdHUxMkY3V0lua1VWd3V3RW9EemRpMFE&output=csv"#
# Download the spreadsheet.#
dw_html <- getURL(dw_link)#
# Transform the result into a proper dataset, leaving text variables (strings) unchanged.#
dw_data <- read.csv(textConnection(dw_html), stringsAsFactors = TRUE)#
# Check result.#
head(dw_data)#
#
##
# MARK SWING STATES#
##
#
# Create marker for battleground states.#
dw_data$Swing <- "Non-Swing State"#
# Mark first twelve states (defined as swing states in the data source).#
dw_data$Swing[1:12] <- "Swing State"#
# Check result.#
dw_data[1:15,]#
#
##
# CREATE MARGINS OF VICTORY#
##
#
# Two-party margins of victory.#
dw_data  <- within(dw_data, {#
  Margin08 <- 100 * ((Obama08 - McCain08) / (Obama08 + McCain08))#
  Margin12 <- 100 * ((Obama12 - Romney12) / (Obama12 + Romney12))#
})#
# Check results.#
summary(dw_data$Margin08)#
summary(dw_data$Margin12)#
#
##
# SORT VALUES#
##
#
# Load reshape package.#
library(reshape)#
# (1/2) Reorder the data by margin of victory in 2012.#
dw_data <- dw_data[order(dw_data$Margin12),]#
# (2/2) Reorder state factor levels to the order of appearance in the data.#
dw_data$State <- as.factor(dw_data$State)#
# Check first five rows.#
head(dw_data)#
# Check last five rows.#
tail(dw_data)#
#
##
# VISUALIZE AS A DOT PLOT#
##
#
# Load ggplot2 package.#
library(ggplot2)#
# Initialize plot.#
dw_plot <- ggplot(dw_data) #
# Add vertical line at zero.#
dw_plot <- dw_plot + geom_vline(xintercept = 0, color = "grey", linetype = "longdash")#
# Add margin of victory from 2008. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin08, y = State, color = "2008"))#
# Add margin of victory from 2012. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin12, y = State, color = "2012"))#
# Add title for horizontal axis.#
dw_plot <- dw_plot + xlab("Two-party margin of victory")#
# Check result.#
dw_plot
<style>@import url(syllabus.css);</style>#
# Data Visualization#
# A graph made from David Wasserman's 2012 National popular Vote Tracker:#
# https://docs.google.com/spreadsheet/ccc?key=0AjYj9mXElO_QdHpla01oWE1jOFZRbnhJZkZpVFNKeVE#gid=19#
#
# See also John Sides' analysis (with links to others) on the same topic:#
# http://themonkeycage.org/blog/2013/01/07/what-if-the-obama-campaign-didnt-win-him-the-election/#
#
##
# LOAD DATA#
##
#
# Load RCurl package.#
library(RCurl)#
# Address of a copy of David Wasserman's spreadsheet, cleaned up.#
dw_link <- "https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdHUxMkY3V0lua1VWd3V3RW9EemRpMFE&output=csv"#
# Download the spreadsheet.#
dw_html <- getURL(dw_link)#
# Transform the result into a proper dataset, leaving text variables (strings) unchanged.#
dw_data <- read.csv(textConnection(dw_html), stringsAsFactors = TRUE)#
# Check result.#
head(dw_data)#
#
##
# MARK SWING STATES#
##
#
# Create marker for battleground states.#
dw_data$Swing <- "Non-Swing State"#
# Mark first twelve states (defined as swing states in the data source).#
dw_data$Swing[1:12] <- "Swing State"#
# Check result.#
dw_data[1:15,]#
#
##
# CREATE MARGINS OF VICTORY#
##
#
# Two-party margins of victory.#
dw_data  <- within(dw_data, {#
  Margin08 <- 100 * ((Obama08 - McCain08) / (Obama08 + McCain08))#
  Margin12 <- 100 * ((Obama12 - Romney12) / (Obama12 + Romney12))#
})#
# Check results.#
summary(dw_data$Margin08)#
summary(dw_data$Margin12)#
#
##
# SORT VALUES#
##
#
# Load reshape package.#
library(reshape)#
# (1/2) Reorder the data by margin of victory in 2012.#
dw_data <- dw_data[order(dw_data$Margin12),]#
# (2/2) Reorder state factor levels to the order of appearance in the data.#
dw_data$State <- factor(dw_data$State)#
# Check first five rows.#
head(dw_data)#
# Check last five rows.#
tail(dw_data)#
#
##
# VISUALIZE AS A DOT PLOT#
##
#
# Load ggplot2 package.#
library(ggplot2)#
# Initialize plot.#
dw_plot <- ggplot(dw_data) #
# Add vertical line at zero.#
dw_plot <- dw_plot + geom_vline(xintercept = 0, color = "grey", linetype = "longdash")#
# Add margin of victory from 2008. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin08, y = State, color = "2008"))#
# Add margin of victory from 2012. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin12, y = State, color = "2012"))#
# Add title for horizontal axis.#
dw_plot <- dw_plot + xlab("Two-party margin of victory")#
# Check result.#
dw_plot
dw_data$State <- factor(dw_data$State)
<style>@import url(syllabus.css);</style>#
# Data Visualization#
# A graph made from David Wasserman's 2012 National popular Vote Tracker:#
# https://docs.google.com/spreadsheet/ccc?key=0AjYj9mXElO_QdHpla01oWE1jOFZRbnhJZkZpVFNKeVE#gid=19#
#
# See also John Sides' analysis (with links to others) on the same topic:#
# http://themonkeycage.org/blog/2013/01/07/what-if-the-obama-campaign-didnt-win-him-the-election/#
#
##
# LOAD DATA#
##
#
# Load RCurl package.#
library(RCurl)#
# Address of a copy of David Wasserman's spreadsheet, cleaned up.#
dw_link <- "https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdHUxMkY3V0lua1VWd3V3RW9EemRpMFE&output=csv"#
# Download the spreadsheet.#
dw_html <- getURL(dw_link)#
# Transform the result into a proper dataset, leaving text variables (strings) unchanged.#
dw_data <- read.csv(textConnection(dw_html), stringsAsFactors = TRUE)#
# Check result.#
head(dw_data)#
#
##
# MARK SWING STATES#
##
#
# Create marker for battleground states.#
dw_data$Swing <- "Non-Swing State"#
# Mark first twelve states (defined as swing states in the data source).#
dw_data$Swing[1:12] <- "Swing State"#
# Check result.#
dw_data[1:15,]#
#
##
# CREATE MARGINS OF VICTORY#
##
#
# Two-party margins of victory.#
dw_data  <- within(dw_data, {#
  Margin08 <- 100 * ((Obama08 - McCain08) / (Obama08 + McCain08))#
  Margin12 <- 100 * ((Obama12 - Romney12) / (Obama12 + Romney12))#
})#
# Check results.#
summary(dw_data$Margin08)#
summary(dw_data$Margin12)#
#
##
# SORT VALUES#
##
#
# Load reshape package.#
library(reshape)#
# (1/2) Reorder the data by margin of victory in 2012.#
dw_data <- dw_data[order(dw_data$Margin12),]#
# (2/2) Reorder state factor levels to the order of appearance in the data.#
dw_data$State <- factor(dw_data$State, dw_data$State)#
# Check first five rows.#
head(dw_data)#
# Check last five rows.#
tail(dw_data)
Load ggplot2 package.#
library(ggplot2)#
# Initialize plot.#
dw_plot <- ggplot(dw_data) #
# Add vertical line at zero.#
dw_plot <- dw_plot + geom_vline(xintercept = 0, color = "grey", linetype = "longdash")#
# Add margin of victory from 2008. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin08, y = State, color = "2008"))#
# Add margin of victory from 2012. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin12, y = State, color = "2012"))#
# Add title for horizontal axis.#
dw_plot <- dw_plot + xlab("Two-party margin of victory")#
# Check result.#
dw_plot
A graph made from David Wasserman's 2012 National popular Vote Tracker:#
# https://docs.google.com/spreadsheet/ccc?key=0AjYj9mXElO_QdHpla01oWE1jOFZRbnhJZkZpVFNKeVE#gid=19#
#
# See also John Sides' analysis (with links to others) on the same topic:#
# http://themonkeycage.org/blog/2013/01/07/what-if-the-obama-campaign-didnt-win-him-the-election/#
#
##
# LOAD DATA#
##
#
# Load RCurl package.#
library(RCurl)#
# Address of a copy of David Wasserman's spreadsheet, cleaned up.#
dw_link <- "https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdHUxMkY3V0lua1VWd3V3RW9EemRpMFE&output=csv"#
# Download the spreadsheet.#
dw_html <- getURL(dw_link)#
# Transform the result into a proper dataset, leaving text variables (strings) unchanged.#
dw_data <- read.csv(textConnection(dw_html), stringsAsFactors = TRUE)#
# Check result.#
head(dw_data)#
#
##
# MARK SWING STATES#
##
#
# Create marker for battleground states.#
dw_data$Swing <- "Non-Swing State"#
# Mark first twelve states (defined as swing states in the data source).#
dw_data$Swing[1:12] <- "Swing State"#
# Check result.#
dw_data[1:15,]#
#
##
# CREATE MARGINS OF VICTORY#
##
#
# Two-party margins of victory.#
dw_data  <- within(dw_data, {#
  Margin08 <- 100 * ((Obama08 - McCain08) / (Obama08 + McCain08))#
  Margin12 <- 100 * ((Obama12 - Romney12) / (Obama12 + Romney12))#
})#
# Check results.#
summary(dw_data$Margin08)#
summary(dw_data$Margin12)#
#
##
# SORT VALUES#
##
#
# Load reshape package.#
library(reshape)#
# (1/2) Reorder the data by margin of victory in 2012.#
dw_data <- dw_data[order(dw_data$Margin12),]#
# (2/2) Reorder state factor levels to their order of appearance in the data.#
dw_data$State <- factor(dw_data$State, dw_data$State)#
# Check first five rows.#
head(dw_data)#
# Check last five rows.#
tail(dw_data)#
#
##
# VISUALIZE AS A DOT PLOT#
##
#
# Load ggplot2 package.#
library(ggplot2)#
# Initialize plot.#
dw_plot <- ggplot(dw_data) #
# Add vertical line at zero.#
dw_plot <- dw_plot + geom_vline(xintercept = 0, color = "grey", linetype = "longdash")#
# Add title for horizontal axis.#
dw_plot <- dw_plot + xlab("Two-party margin of victory")#
# Add margin of victory from 2008. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin08, y = State, color = "2008"))#
# Add margin of victory from 2012. Note: Make sure the 'color' argument is _inside_ aes().#
dw_plot <- dw_plot + geom_point(aes(x = Margin12, y = State, color = "2012"))#
# Check result.#
dw_plot#
#
##
# CUSTOMIZE LEGEND AND COLORS#
##
#
# Create a discrete color scale.#
dw_cols <- c("2008" = "grey", "2012" = "black")#
# Apply color scale.#
dw_plot <- dw_plot + scale_colour_manual(values = dw_cols, name = "Year")#
# Check result: re-plot.#
dw_plot#
#
##
# DISCRIMINATE BATTLEGROUND STATES#
##
#
# Subset swing states.#
dw_swing <- dw_data[dw_data$Swing=="Swing State",]#
# Add swing states to color scale.#
dw_cols <- c("2008" = "grey", "2012" = "black", "Swing state" = "red")#
# Re-apply color scale.#
dw_plot <- dw_plot + scale_colour_manual(values = dw_cols, name = "Year")#
# Overlay swing states to plot. Shape '1' is the empty circle. Size and shape are _outside_ aes().#
dw_plot <- dw_plot + geom_point(data = dw_swing, #
  aes(x = Margin12, y = State, color = "Swing state"), #
  size = 3, border = 2, shape = 1)#
# Check result: re-plot.#
dw_plot#
#
##
# COLOR TEXT LABELS#
##
#
# Define different colors for the labels of swing states.#
dw_labc <- ifelse(dw_data$Swing=="Swing State","red","grey")#
# Stick color labels onto the plot (thanks to Didzis from Stack Overflow).#
dw_plot <- dw_plot + theme(axis.text.y = element_text(colour = dw_labc))#
# Check result: re-plot.#
dw_plot
ls()
rm(list = ls())
ls()
?ls
library(twitteR)#
library(ggplot2)#
library(grid)#
# download all that you can#
pol <- userTimeline('BeijingAir', n=3200)#
length(pol)#
# 3200#
myGrep <- function(x){#
  grep("PM2.5 24hr avg;", x$getText(), value=T)#
}#
POL <- unlist(lapply(pol, myGrep))#
# cleaning no data tweets#
POL <- POL[-grep("No Data", POL)]#
# uncomment the following to combine with previous extract#
# allPM <- unique(c(allPM, POL))#
allPM <- POL#
time <- sub("^(.*) to .*", "\\1", allPM)#
# to posix time#
time <- strptime(time, format="%m-%d-%Y %R")#
PM <- as.numeric(sub("^.* 24hr avg; (.*); .*; .*", "\\1", allPM, perl=T))#
data <- data.frame(PM=PM, time=time)#
data <- data[order(data$time),]#
yrange <- c(25, 75, 125, 175, 250, 400)#
tsize=4#
min(data$time)#
# [1] "2012-04-08 PDT"#
textPos <- as.POSIXct("2012-04-12")#
p <- qplot(time, PM, data=data, geom=c("blank"), group=1)#
p + #
labs(x = "Time", y = "Fine particles (PM2.5) 24hr avg", size = expression(log[10](pval))) +#
opts(title="Air pollution in Beijing\nTwitter @BeijingAir", panel.background=theme_rect(colour="white")) +#
geom_hline(aes(yintercept=50), colour="green", alpha=I(1/5), size=2) +#
geom_hline(aes(yintercept=100), colour="yellow", alpha=I(1/5), size=2) +#
geom_hline(aes(yintercept=150), colour="orange", alpha=I(1/5), size=2) +#
geom_hline(aes(yintercept=200), colour="red", alpha=I(1/5), size=2) +#
geom_hline(aes(yintercept=300), colour="darkred", alpha=I(1/5), size=2) +#
geom_path(aes(time, PM), data=data, group=1) +#
annotate("text", x=textPos, y=yrange[1], label="good", size=tsize, colour="grey70") +#
annotate("text", x=textPos, y=yrange[2], label="moderate", size=tsize, colour="grey70") +#
annotate("text", x=textPos, y=yrange[3], label="unhealthy", size=tsize, colour="grey70") +#
annotate("text", x=textPos, y=yrange[4], label="unhealthy +", size=tsize, colour="grey70") +#
annotate("text", x=textPos, y=yrange[5], label="unhealthy ++", size=tsize, colour="grey70") +#
annotate("text", x=textPos, y=yrange[6], label="hazardous", size=tsize, colour="grey70") +#
opts(title="Air pollution in Beijing\nTwitter @BeijingAir",#
 panel.background=theme_rect(colour="white"))#
ggsave(filename="twitter_pol.png")
"hello world"
http://www.biostat.jhsph.edu/~rpeng/makeBeijingAirGraph.R#
#
library(twitteR)#
#
n <- 27#
feed <- userTimeline("BeijingAir", n = n)#
sfeed <- lapply(feed, function(x) strsplit(x$getText(), "; ", fixed = TRUE))#
times <- vector("list", length = n)#
pm25 <- numeric(n)#
times <- sapply(sfeed, function(x) {#
        paste(x[[1]][1:2], collapse = " ")#
})#
times <- strptime(times, "%m-%d-%Y %H:%M")#
pm25 <- sapply(sfeed, function(x) {#
        x <- x[[1]]#
        if(length(grep("^Past", x[3])) > 0)#
                return(NA)#
        as.numeric(x[4])#
})#
u <- !is.na(pm25)#
times <- times[u]#
pm25 <- pm25[u]#
#
png(file = "beijing24.png", width = 700, height = 480)#
par(mar = c(2, 4.5, 2, 1) + .1)#
plot(times, pm25, main = expression(PM[2.5] * " in Beijing"),#
     xlab = "", ylab = expression(PM[2.5] * " (" * mu * g/m^3 * ")"),#
     pch = 19, type = "b")#
dev.off()
http://www.biostat.jhsph.edu/~rpeng/makeBeijingAirGraph.R#
#
library(twitteR)#
#
n <- 27#
feed <- userTimeline("BeijingAir", n = n)#
sfeed <- lapply(feed, function(x) strsplit(x$getText(), "; ", fixed = TRUE))#
times <- vector("list", length = n)#
pm25 <- numeric(n)#
times <- sapply(sfeed, function(x) {#
        paste(x[[1]][1:2], collapse = " ")#
})#
times <- strptime(times, "%m-%d-%Y %H:%M")#
pm25 <- sapply(sfeed, function(x) {#
        x <- x[[1]]#
        if(length(grep("^Past", x[3])) > 0)#
                return(NA)#
        as.numeric(x[4])#
})#
u <- !is.na(pm25)#
times <- times[u]#
pm25 <- pm25[u]#
#
png(file = "beijing24.png", width = 700, height = 480)#
par(mar = c(2, 4.5, 2, 1) + .1)#
plot(times, pm25, main = expression(PM[2.5] * " in Beijing"),#
     xlab = "", ylab = expression(PM[2.5] * " (" * mu * g/m^3 * ")"),#
     pch = 19, type = "b")#
#dev.off()
times
pm25
plot(times, pm25, main = expression(PM[2.5] * " in Beijing"),#
     xlab = "", ylab = expression(PM[2.5] * " (" * mu * g/m^3 * ")"),#
     pch = 19, type = "b")
qplot(times,pm25)
library(ggplot2)
qplot(times,pm25)
http://www.biostat.jhsph.edu/~rpeng/makeBeijingAirGraph.R#
#
library(twitteR)#
#
n <- 27#
feed <- userTimeline("BeijingAir", n = n)#
sfeed <- lapply(feed, function(x) strsplit(x$getText(), "; ", fixed = TRUE))#
times <- vector("list", length = n)#
pm25 <- numeric(n)#
times <- sapply(sfeed, function(x) {#
        paste(x[[1]][1:2], collapse = " ")#
})#
times <- strptime(times, "%m-%d-%Y %H:%M")#
pm25 <- sapply(sfeed, function(x) {#
        x <- x[[1]]#
        if(length(grep("^Past", x[3])) > 0)#
                return(NA)#
        as.numeric(x[4])#
})#
u <- !is.na(pm25)#
times <- times[u]#
pm25 <- pm25[u]#
#
png(file = "beijing24.png", width = 700, height = 480)#
par(mar = c(2, 4.5, 2, 1) + .1)#
plot(times, pm25, main = expression(PM[2.5] * " in Beijing"),#
     xlab = "", ylab = expression(PM[2.5] * " (" * mu * g/m^3 * ")"),#
     pch = 19, type = "b")#
dev.off()
"hello world"
1 + 2
x <- 1
q()
library(RCurl)
require(RCurl)
?rename
??rename
library()
install.packages(memisc)
install.packages("memisc")
?rename
library(memisc)
?rename
options(digits=3)
nes1948.por <- UnZip("anes/NES1948.ZIP","NES1948.POR",package="memisc")
ls
ls()
nes1948 <- spss.portable.file(nes1948.por)
rint(nes1948)
print(nes1948)
?description
description(nes1948)
nes1948.dta <- UnZip("/Users/fr/Desktop/memisc-anes48/anes1948dta.zip","NES1948.dta",package="memisc")
nes1948.test <- Stata.file("/Users/fr/Desktop/memisc-anes48/anes1948dta/NES1948.dta")
nes1948.test
description(nes1948.test)
codebook(nes1948.test)
library(foreign)
?spss.get
??spss.get
library(Hmisc)
d <- spss.get("~/Downloads/reyoubothworkonthefrontnationalmeetingonfriday/Dataset Political Studies.sav")
d
names(d)
head(d)
with(d, lm(Womensrepresentation ~ FreedomHouse))
with(d, lm(Womensrepresentation ~ FreedomHouse + Control.of.Courruption + Quotas + PR + GDP + Percent.Muslims + Female.Actitivity.rate))
m <- with(d, lm(Womensrepresentation ~ FreedomHouse + Control.of.Courruption + Quotas + PR + GDP + Percent.Muslims + Female.Actitivity.rate))
str(m)
names(m)
m$coefficients
m$model
ls()
nes1948.por <- UnZip("anes/NES1948.ZIP","NES1948.POR",package="memisc")
library(memisc)
nes1948.por <- UnZip("anes/NES1948.ZIP","NES1948.POR",package="memisc")
nes1948 <- spss.portable.file(nes1948.por)
vote.48 <- subset(nes1948,              select=c(                  v480018,                  v480029,                  v480030,                  v480045,                  v480046,                  v480047,                  v480048,                  v480049,                  v480050                  ))
xtabs(~vote3+occup4,data=vote.48)
vote.48 <- within(vote.48,{  vote3 <- recode(vote,    1   -> "Truman",2 -> "Dewey",    3:4 -> "Other"    )  occup4 <- recode(occupation.hh,    10:20 -> "Upper white collar",    30    -> "Other white collar",    40:70 -> "Blue collar",    80    -> "Farmer"    )  relig3 <- recode(religious.pref,    1   -> "Protestant",    2   -> "Catholic",    3:5 -> "Other/none"    )   race2 <- recode(race,    1 -> "White",    2 -> "Black"    )})
vote.48 <- rename(vote.48,v480018 = "vote",v480029 = "occupation.hh",v480030 = "unionized.hh",v480045 = "gender",v480046 = "race",v480047 = "age",v480048 = "education",v480049 = "total.income",v480050 = "religious.pref")
vote.48 <- within(vote.48,{  vote3 <- recode(vote,    1   -> "Truman",2 -> "Dewey",    3:4 -> "Other"    )  occup4 <- recode(occupation.hh,    10:20 -> "Upper white collar",    30    -> "Other white collar",    40:70 -> "Blue collar",    80    -> "Farmer"    )  relig3 <- recode(religious.pref,    1   -> "Protestant",    2   -> "Catholic",    3:5 -> "Other/none"    )   race2 <- recode(race,    1 -> "White",    2 -> "Black"    )})
xtabs(~vote3+occup4,data=vote.48)
mtable(xtabs(~vote3+occup4,data=vote.48))
genTable(percent(vote3)~occup4,data=vote.48)
options(digits=1)
genTable(percent(vote3)~occup4,data=vote.48)
options(digits=2)
genTable(percent(vote3)~occup4,data=vote.48)
t(genTable(percent(vote3)~occup4,data=vote.48))
install.packages("mosaic")
??fetchGoogle
fetchGoogle
require(mosaic)
fetchGoogle
?rflip
??rflip
require(mosaic)
rflip(10)
nflip(10)
coin <- rflip(10)
coin
str(coin)
coin$sequence
coin[,"sequence"]
?nflip
as.numeric(rflip(10))
as.list(rflip(10))
library(ggplot2)
qplot(c(0, 2), stat="function", fun=exp, geom="line")
qplot(c(0:2), stat="function", fun=exp, geom="line")
qplot(c(0:2), stat="function", fun=exp, geom="point")
0:2
qplot(c(0,2), stat="function", fun=exp, geom="bar")
qplot(c(0,2), stat="function", fun=sum, geom="bar")
qplot(c(0,2), stat="function", fun=sum, geom="point")
qplot(c(0,2), stat="function", fun=x, geom="point")
qplot(c(0,2), stat="function", fun=identity, geom="point")
qplot(c(0,2), stat="function", fun=sin, geom="point")
qplot(c(-10,10), stat="function", fun=sin, geom="point")
qplot(c(-10,10), stat="function", fun=sin, geom="line")
qplot(c(-10,10), stat="function", fun=sin, geom="line") + geom_point()
qplot(c(-10,10), stat="function", fun=sin, geom=c("line","point"))
qplot(c(-10:10), stat="function", fun=sin, geom=c("line","point"))
qplot(c(-10:10), stat="function", fun=exp, geom=c("line","point"))
p1 <- qplot(c(-10:10), stat="function", fun=exp, geom=c("line","point"))
p2 <- qplot(c(-10:10), stat="function", fun=sin, geom=c("line","point"))
p1 + p2
p1
p2
qplot(c(-10:10), stat="function", fun=exp, geom=c("line","point"))
qplot(c(-10:10), stat="function", fun=exp, geom="point")
qplot(c(-10,10), stat="function", fun=sin, geom="point")
qplot(c(-10,10), stat="function", fun=sin, geom="line")
qplot(c(0,2), stat="function", fun=identity, geom="point")
qplot(c(-10,10), stat="function", fun=sin, geom="line")
qplot(c(-10,10), stat="function", fun=sin, geom="point")
qplot(c(0,2), stat="function", fun=identity, geom="line")
x#
#
qplot(c(0,2), stat="function", fun=identity, geom="point")#
qplot(c(0,2), stat="function", fun=identity, geom="line")#
#
# sin#
#
qplot(c(-10,10), stat="function", fun=sin, geom="line")#
#
# exp#
qplot(c(-10:10), stat="function", fun=exp, geom="point")#
qplot(c(-10:10), stat="function", fun=exp, geom="line")#
qplot(c(-10:10), stat="function", fun=exp, geom=c("line","point"))
qplot(c(-10:10), stat="function", fun=exp, geom=c("line","point"), color = c("blue","red"))
qplot(c(-10:10), stat="function", fun=exp, geom=c("line","point"), color = "blue")
qplot(c(-10:10), stat="function", fun=exp, geom=c("line","point"))
library(ggplot2)
install.packages('ggplot2', dep = TRUE)
library(ggplot2)
getwd()
remove.package("grid")
remove.packages("grid")
library(ggplot2)
?qplot
require(ggplot2)
?install.packages
library(ggplot2)
installed.packages()
installed.packages()[,1]
?getOption
?grid
help(package="grid")
bmi <- round(703 * 134/(70^2), 1)#
cat("My BMI is approximately", bmi, "(which is barely normal).")
bmi.quetelet <- function(weight, height, digits = 2) {#
    round(weight/(height^2), digits)#
}#
#
# test#
bmi.quetelet(weight = 63, height = 177)
bmi.quetelet <- function(weight, height, digits = 2) {#
    round(weight/(height^2), digits)#
}#
#
# test#
bmi.quetelet(weight = 63, height = 1.77)
m <- cbind(1:3, 4:6)
m
str(m)
is.matrix(m)
grades <- getURL("https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdG9oR2Y3T3U1Y3I5YlgzUmNBSVFrRUE&single=true&gid=0&output=csv")
library(RCurl)
grades <- getURL("https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdG9oR2Y3T3U1Y3I5YlgzUmNBSVFrRUE&single=true&gid=0&output=csv")
grades
grades <- getURL("https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdG9oR2Y3T3U1Y3I5YlgzUmNBSVFrRUE&single=true&gid=0&output=csv")
length(grades)
?getURL
grades
grades <- getURL("http://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdG9oR2Y3T3U1Y3I5YlgzUmNBSVFrRUE&single=true&gid=0&output=csv")
grades
?getURL
grades <- getURL("http://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdG9oR2Y3T3U1Y3I5YlgzUmNBSVFrRUE&single=true&gid=0&output=csv")
grades <- getURL("https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdG9oR2Y3T3U1Y3I5YlgzUmNBSVFrRUE&single=true&gid=0&output=csv")
grades
library(RCurl)#
# Download the data.#
grades <- getURL("https://docs.google.com/spreadsheet/pub?key=0Agz-ZYJ5rH_WdG9oR2Y3T3U1Y3I5YlgzUmNBSVFrRUE&single=true&gid=0&output=csv")#
# Make the data readable.#
grades <- textConnection(grades)#
# Convert the data from CSV format.#
grades <- read.csv(grades)#
# Check result.#
head(grades)
read.csv("http://briatte.org/temp/grades.csv")
require(twitteR)#
require(wordcloud)#
require(igraph)
require(twitteR)#
require(wordcloud)#
require(igraph)#
#
# Create an empty character vector of the same length as the number of#
# tweets#
l <- length(tweets)#
tweeter <- vector(mode = "character", length = l)#
#
# Extract the screen names from each tweet status#
for (i in 1:l) tweeter[i] <- tweets[[i]]$getScreenName()#
# Compile the frequencies of each screen name#
tweeter.freq <- table(tweeter)
install.packages("wordcloud")
require(twitteR)
require(wordcloud)
require(igraph)
Create an empty character vector of the same length as the number of#
# tweets#
l <- length(tweets)#
tweeter <- vector(mode = "character", length = l)#
#
# Extract the screen names from each tweet status#
for (i in 1:l) tweeter[i] <- tweets[[i]]$getScreenName()#
# Compile the frequencies of each screen name#
tweeter.freq <- table(tweeter)
tweets <- searchTwitter("#occupy", n = 250)
str(tweets)
Create an empty character vector of the same length as the number of#
# tweets#
l <- length(tweets)#
tweeter <- vector(mode = "character", length = l)#
#
# Extract the screen names from each tweet status#
for (i in 1:l) tweeter[i] <- tweets[[i]]$getScreenName()#
# Compile the frequencies of each screen name#
tweeter.freq <- table(tweeter)
par(bg = "black")
Draw the word cloud#
wordcloud(names(tweeter.freq), tweeter.freq, colors = c("tomato", #
    "wheat", "lightblue"), scale = c(6, 0.5), random.color = TRUE, rot.per = 0.5, #
    min.freq = 1, font = 2, family = "serif")
min.freq = 1, font = 2, family = "serif")
wordcloud(names(tweeter.freq), tweeter.freq, colors = c("tomato", #
    "wheat", "lightblue"), scale = c(6, 0.5), random.color = TRUE, rot.per = 0.5, #
    min.freq = 1, font = 2, family = "serif")
?wordcloud
wordcloud(names(tweeter.freq), tweeter.freq, colors = c("tomato", #
    "wheat", "lightblue"), scale = c(6, 0.5), random.color = TRUE, rot.per = 0.5, #
    min.freq = 1, font = 2, family = "sans")
Create an empty vector to store the tweet texts#
texts <- vector(mode = "character", length = l)#
#
# Extract the tweet text from each tweet status#
for (i in 1:l) texts[i] <- tweets[[i]]$getText()#
#
# List all the tweets tweeted by @leofroth#
texts[tweeter == "leofroth"]
require(twitteR)#
require(wordcloud)#
require(igraph)#
#
tweets <- searchTwitter("#occupy", n = 250)#
#
# Create an empty character vector of the same length as the number of#
# tweets#
l <- length(tweets)#
tweeter <- vector(mode = "character", length = l)#
#
# Extract the screen names from each tweet status#
for (i in 1:l) tweeter[i] <- tweets[[i]]$getScreenName()#
# Compile the frequencies of each screen name#
tweeter.freq <- table(tweeter)#
#
# Black backgrounds are 'this year's colour' in terms of dataviz!#
par(bg = "black")#
#
# Draw the word cloud#
wordcloud(names(tweeter.freq), tweeter.freq, colors = c("tomato", #
    "wheat", "lightblue"), scale = c(6, 0.5), random.color = TRUE, rot.per = 0.5, #
    min.freq = 1, font = 2, family = "sans")#
#
# Create an empty vector to store the tweet texts#
texts <- vector(mode = "character", length = l)#
#
# Extract the tweet text from each tweet status#
for (i in 1:l) texts[i] <- tweets[[i]]$getText()#
#
# List all the tweets tweeted by @leofroth#
texts[tweeter == "leofroth"]
library(tm)
??MIME
C <- matrix(as.integer(10 * runif(16)), nrow = 2, ncol = 2)
C
t(C)
library(knitr)
?knit
getwd()
setwd()
setwd("")
setwd("~/Documents/Teaching/IDA")
dir()
knit("90_ts.Rmd")
purl("90_ts.Rmd")
purl("30_math.Rmd")
?purl
?knit2html
interactive()
?interactive
purl("30_math.Rmd", documentation = 0)
purl("30_math.Rmd", documentation = 2)
